// Code generated by go-bindata.
// sources:
// sql/001_add-initial-tables.down.sql
// sql/001_add-initial-tables.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_addInitialTablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4e\x4c\xce\x48\xd5\x4b\xc9\x4f\x2e\xcd\x4d\xcd\x2b\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\x50\x92\x98\x9c\x9c\x5a\x5c\x1c\x5f\x94\x9a\x9c\x5f\x94\x82\xa6\x2e\xd8\xd9\xc3\xd5\xd7\x11\xa2\xd0\x1a\x10\x00\x00\xff\xff\x3d\x76\x93\xf2\x5d\x00\x00\x00")

func _001_addInitialTablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesDownSql,
		"001_add-initial-tables.down.sql",
	)
}

func _001_addInitialTablesDownSql() (*asset, error) {
	bytes, err := _001_addInitialTablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.down.sql", size: 93, mode: os.FileMode(420), modTime: time.Unix(1523129462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_addInitialTablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcb\x72\x9b\x30\x14\xdd\xf3\x15\x67\x67\x33\x43\xfa\x03\x5e\xc9\x89\x92\x30\xc5\x22\x05\x79\x52\xa7\x0b\x46\x15\x37\x8e\x86\x97\x47\x08\x77\xe8\xd7\x77\x30\x4d\x3c\x2e\x78\x91\x6e\xaf\x74\xcf\x3d\x2f\xef\x36\xe1\x4c\x72\xa4\xb7\x8f\x7c\xc3\xa0\x95\x7e\xa3\x95\xf7\x3e\x95\x6c\x1d\xf1\x71\xf8\x45\x69\x4d\x6d\x9b\x59\xd2\x8d\xcd\xb1\xf4\x00\xdb\xfc\xca\x4c\x8e\x94\x27\x21\x8b\xf0\x94\x84\x1b\x96\xec\xf0\x95\xef\x02\x0f\x70\x56\xd5\xad\xd2\xce\x34\x75\x76\x20\x6b\x9a\x1c\x32\x95\x2f\x09\x13\x0f\x1c\x22\x96\x10\xdb\x28\xc2\x1d\xbf\x67\xdb\x48\xc2\xb5\xee\xb7\x55\xf5\x9e\x96\x22\x7e\x5e\xfa\x01\x16\xa6\x7e\x35\xb5\x71\xfd\x22\xc0\xe2\x87\xbf\xf0\x07\xcc\x82\x7a\xac\x77\x92\xb3\x0f\x80\x61\x7a\xa2\x97\x1d\x3a\x97\x35\x5a\x77\xd6\x52\x8e\x75\x1c\x47\x9c\x89\xe9\x9d\x7b\x16\xa5\xfc\x72\xc9\x99\x8a\xb2\xca\xd4\x08\x85\x9c\x7d\xd1\xb6\xc1\x3a\x7c\xf8\xfb\x5c\x9a\x9f\xd6\x7c\xf6\xda\x79\x69\x16\x73\x3c\xb9\xa7\xff\x50\x30\x2c\x4d\x30\x3d\xff\x1c\xe1\x56\x84\xdf\xb6\x1c\xa1\xb8\xe3\xdf\x71\x91\x61\x56\x50\x3f\x70\xf2\x80\x58\xcc\x87\x5c\x50\x1f\xcc\xf8\x1b\xcc\xb8\xe0\x7b\xc0\xf3\x23\x4f\xc6\x70\xa7\x8a\x56\xc0\xcd\x0d\xaa\xae\x74\xe6\x50\xd2\xf8\x01\x7b\x72\x18\x6f\xb5\x78\x53\x47\x42\xab\x2a\xc2\x85\xb9\xaf\xa5\xda\xe3\xa8\xca\x8e\xda\x77\x49\x73\x5a\xe8\x68\x4e\x5d\xbb\x22\x65\x39\x25\x1c\xcc\x74\x60\xf0\x6d\xae\xfb\x79\xa3\xbb\x8a\x6a\xf7\xb9\xda\x0f\xa8\x90\xe1\x86\xa7\x92\x6d\x9e\xe4\xcb\x34\xcc\xb1\xec\x57\x9b\x7d\x92\xfd\xcf\xfc\x6a\xb6\xa3\x9a\x01\xe8\xc3\x82\x33\xed\x82\x7a\x7f\xe5\xfd\x09\x00\x00\xff\xff\xbf\x92\x6b\xfc\xed\x03\x00\x00")

func _001_addInitialTablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTablesUpSql,
		"001_add-initial-tables.up.sql",
	)
}

func _001_addInitialTablesUpSql() (*asset, error) {
	bytes, err := _001_addInitialTablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tables.up.sql", size: 1005, mode: os.FileMode(420), modTime: time.Unix(1523196755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_add-initial-tables.down.sql": _001_addInitialTablesDownSql,
	"001_add-initial-tables.up.sql":   _001_addInitialTablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_add-initial-tables.down.sql": &bintree{_001_addInitialTablesDownSql, map[string]*bintree{}},
	"001_add-initial-tables.up.sql":   &bintree{_001_addInitialTablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
